package main

import (
	"log"
	"time"

	"./course"
	"./objects"
	"./orglist"
	"./waves"
	"github.com/tidwall/gjson"

	tb "gopkg.in/tucnak/telebot.v2"
)

// –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var fond = ""
var sum = ""

// –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

var courseJSON []byte
var courseResult gjson.Result

var wavesBalanceResult gjson.Result
var currencyBalanceResult gjson.Result

func main() {
	b, err := tb.NewBot(tb.Settings{
		// Token: "576497547:AAFqeiPb5j5fVktRPqtzpTvaIp8ExKlZZAY",
		Token:  "525513661:AAEdYAbizNP8SiT2fhjweHRZULFL84KsUYk",
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})

	// –¢–µ—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤
	// –ü–æ–ª—É—á–∞–µ–º assetId –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
	assetId := objects.GetAssetId(objects.Bitcoin)
	// –ü–æ–ª—É—á–∞–µ–º name –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
	name := objects.GetName(objects.Bitcoin)
	// –ü–æ–ª—É—á–∞–µ–º ticker –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
	ticker := objects.GetTicker(objects.Bitcoin)

	// –¢–µ—Å—Ç –∫—É—Ä—Å–æ–≤
	// –ü–æ–ª—É—á–∞–µ–º JSON —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–æ–≤
	courseJSON = course.Course("USD")
	/*
		–ë–µ—Ä—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫—É—Å–∞–º.
		–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: WAVES, BTC, ETH, ZEC, LTC, USD, EUR
	*/
	courseResult = gjson.Get(string(courseJSON), "WAVES")

	// –¢–µ—Å—Ç Waves
	// –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ WAVES
	wavesBalanceResult = waves.GetWavesBalance("3P3Xd5x7hqKjhKhJXKfPo1RVhixTCWA9TE2")
	// –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–µ
	currencyBalanceResult = waves.GetBalance("3P3Xd5x7hqKjhKhJXKfPo1RVhixTCWA9TE2", objects.GetAssetId(objects.ZCash))

	//–¢–µ—Å—Ç mongoDB
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–¥–∞
	// mongo.AddFoundation("–ò–º—è", 2018, 1.3, "–†–æ—Å—Å–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ–Ω–¥–µ")
	// –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ–Ω–¥–∞–º
	// mongo.FindAllFoundations()

	// –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
	println(assetId)
	println(name)
	println(ticker)
	println(courseResult.String())
	println(wavesBalanceResult.String())
	println(currencyBalanceResult.String())

	replyBtn1 := tb.ReplyButton{Text: "üí≥ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}
	replyBtn2 := tb.ReplyButton{Text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ"}
	replyKeys := [][]tb.ReplyButton{
		[]tb.ReplyButton{replyBtn1},
		[]tb.ReplyButton{replyBtn2},
	}
	inlineBtn1 := tb.InlineButton{Unique: "1", Text: "1Ô∏è‚É£"}
	inlineBtn2 := tb.InlineButton{Unique: "2", Text: "2Ô∏è‚É£"}
	inlineBtn3 := tb.InlineButton{Unique: "3", Text: "3Ô∏è‚É£"}
	inlineBtn4 := tb.InlineButton{Unique: "4", Text: "4Ô∏è‚É£"}
	inlineBtn5 := tb.InlineButton{Unique: "5", Text: "5Ô∏è‚É£"}
	inlineBtn6 := tb.InlineButton{Unique: "6", Text: "6Ô∏è‚É£"}
	inlineBtn7 := tb.InlineButton{Unique: "7", Text: "7Ô∏è‚É£"}
	inlineBtn8 := tb.InlineButton{Unique: "8", Text: "8Ô∏è‚É£"}
	inlineBtn9 := tb.InlineButton{Unique: "9", Text: "9Ô∏è‚É£"}

	inlineKbrdCalc := [][]tb.InlineButton{
		{inlineBtn1, inlineBtn2, inlineBtn3, inlineBtn4, inlineBtn5, inlineBtn6, inlineBtn7, inlineBtn8, inlineBtn9},
	}

	inlineInv := tb.InlineButton{Unique: "inv", Text: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"}
	inlineInvMenu := [][]tb.InlineButton{
		{inlineInv},
	}

	inlineklav0 := tb.InlineButton{Unique: "klav0", Text: "0Ô∏è‚É£"}
	inlineklav1 := tb.InlineButton{Unique: "klav1", Text: "1Ô∏è‚É£"}
	inlineklav2 := tb.InlineButton{Unique: "klav2", Text: "2Ô∏è‚É£"}
	inlineklav3 := tb.InlineButton{Unique: "klav3", Text: "3Ô∏è‚É£"}
	inlineklav4 := tb.InlineButton{Unique: "klav4", Text: "4Ô∏è‚É£"}
	inlineklav5 := tb.InlineButton{Unique: "klav5", Text: "5Ô∏è‚É£"}
	inlineklav6 := tb.InlineButton{Unique: "klav6", Text: "6Ô∏è‚É£"}
	inlineklav7 := tb.InlineButton{Unique: "klav7", Text: "7Ô∏è‚É£"}
	inlineklav8 := tb.InlineButton{Unique: "klav8", Text: "8Ô∏è‚É£"}
	inlineklav9 := tb.InlineButton{Unique: "klav9", Text: "9Ô∏è‚É£"}
	inlineklavdot := tb.InlineButton{Unique: "klavdot", Text: " . "}
	inlineklavapply := tb.InlineButton{Unique: "enter", Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
	inlineklavrenew := tb.InlineButton{Unique: "renew", Text: "üÜï –ó–∞–Ω–æ–≤–æ"}
	inlineklavback := tb.InlineButton{Unique: "remove", Text: "‚ùå –ù–∞–∑–∞–¥"}
	inlineklavdellast := tb.InlineButton{Unique: "last", Text: "‚¨ÖÔ∏è"}
	inlineKbrdsum := [][]tb.InlineButton{
		{inlineklav1, inlineklav2, inlineklav3}, {inlineklav4, inlineklav5, inlineklav6},
		{inlineklav7, inlineklav8, inlineklav9}, {inlineklavdot, inlineklav0, inlineklavdellast},
		{inlineklavrenew, inlineklavback}, {inlineklavapply},
	}

	inlin—Évapply := tb.InlineButton{Unique: "apply", Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
	inlineKbrdaply := [][]tb.InlineButton{{inlin—Évapply}}
	course.Course("USD")

	if err != nil {
		log.Fatal(err)
		return
	}

	b.Handle("/start", func(m *tb.Message) {
		if !m.Private() {
			return
		}
		b.Send(m.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{DisableWebPagePreview: true}, &tb.ReplyMarkup{ReplyKeyboard: replyKeys})
	})
	// —Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤ —Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è–º–∏
	b.Handle(&replyBtn2, func(m *tb.Message) {
		b.Send(m.Sender, orglist.Data, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
	})
	// —Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤ —Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è–º–∏

	// inline buttons 1-9 –ò–Ω—Ñ–∞ –æ —Ñ–æ–Ω–¥–∞—Ö
	b.Handle(&inlineBtn1, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data1, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn2, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data2, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn3, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data3, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn4, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data4, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn5, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data5, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn6, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data6, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn7, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data7, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn8, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data8, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn9, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.Data9, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	// inline buttons 1-9

	// —Å–ª—É—à–∞–µ—Ç –∫–∞–∫–æ–π —Ñ–æ–Ω–¥ –≤—ã–±—Ä–∞–ª
	b.Handle("/fond0", func(m *tb.Message) {
		fond = "1"
		b.Send(m.Sender, orglist.DataAdd, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond1", func(m *tb.Message) {
		fond = "2"
		b.Send(m.Sender, orglist.DataAdd1, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond2", func(m *tb.Message) {
		fond = "3"
		b.Send(m.Sender, orglist.DataAdd2, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond3", func(m *tb.Message) {
		fond = "4"
		b.Send(m.Sender, orglist.DataAdd3, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond4", func(m *tb.Message) {
		fond = "5"
		b.Send(m.Sender, orglist.DataAdd4, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond5", func(m *tb.Message) {
		fond = "6"
		b.Send(m.Sender, orglist.DataAdd5, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond6", func(m *tb.Message) {
		fond = "7"
		b.Send(m.Sender, orglist.DataAdd6, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond7", func(m *tb.Message) {
		fond = "8"
		b.Send(m.Sender, orglist.DataAdd7, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond8", func(m *tb.Message) {
		fond = "9"
		b.Send(m.Sender, orglist.DataAdd8, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	// —Å–ª—É—à–∞–µ—Ç –∫–∞–∫–æ–π —Ñ–æ–Ω–¥ –≤—ã–±—Ä–∞–ª

	// –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞
	b.Handle(&inlineInv, func(c *tb.Callback) {
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	// –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞

	// —Ç—É—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –ø–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—é –¥–µ–Ω–µ–≥
	b.Handle(&inlineklav1, func(c *tb.Callback) {
		sum += "1"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav2, func(c *tb.Callback) {
		sum += "2"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav3, func(c *tb.Callback) {
		sum += "3"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav4, func(c *tb.Callback) {
		sum += "4"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav5, func(c *tb.Callback) {
		sum += "5"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav6, func(c *tb.Callback) {
		sum += "6"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav7, func(c *tb.Callback) {
		sum += "7"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav8, func(c *tb.Callback) {
		sum += "8"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav9, func(c *tb.Callback) {
		sum += "9"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavdot, func(c *tb.Callback) {
		sum += "."
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavrenew, func(c *tb.Callback) {
		sum = ""
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavdellast, func(c *tb.Callback) {
		sz := len(sum)
		if sz > 0 {
			sum = sum[:sz-1]
		}
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavapply, func(c *tb.Callback) {
		var msg = "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + "\n\n–í—ã –≥–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ–Ω–¥—É " + fond
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdaply})
		b.Respond(c, &tb.CallbackResponse{})
	})
	// —Ç—É—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –ø–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—é –¥–µ–Ω–µ–≥

	// final apply
	b.Handle(&inlin—Évapply, func(c *tb.Callback) {
		var msg = "–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Send(c.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{DisableWebPagePreview: true}, &tb.ReplyMarkup{ReplyKeyboard: replyKeys})
		b.Respond(c, &tb.CallbackResponse{})
	})
	// final apply

	b.Start()
}
